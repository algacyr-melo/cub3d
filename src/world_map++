free_main.c:	while (map->world_map[map->map_start])
free_main.c:		free(map->world_map[map->map_start]);
free_main.c:		map->map_start++;
textures_path.c:		if (ft_strncmp(map->world_map[i], "NO", 2) == 0)
textures_path.c:		else if (ft_strncmp(map->world_map[i], "SO", 2) == 0)
textures_path.c:		else if (ft_strncmp(map->world_map[i], "WE", 2) == 0)
textures_path.c:		free(map->world_map[j]);
textures_path.c:		map->world_map[j] = NULL;
textures_path.c:	map->world_map += i;
textures_path.c:		if (ft_strncmp(map->world_map[i], "EA", 2) == 0)
textures_path.c:		else if (map->world_map[i][0] == 'F' || map->world_map[i][0] == 'C')
textures_path.c:	if (map->world_map[i][0] == 'F')
textures_path.c:			map->floor = ft_substr(map->world_map[i], 1, 
textures_path.c:						ft_strlen(map->world_map[i]) - 1);
textures_path.c:			map->ciel = ft_substr(map->world_map[i], 1, 
textures_path.c:						ft_strlen(map->world_map[i]) - 1);
textures_path.c:	if (map->world_map[i][0] == '1' || map->world_map[i] == NULL)
textures_path.c:	map->path_NO = ft_substr(map->world_map[i], 2, 
textures_path.c:						ft_strlen(map->world_map[i]) - 2);
textures_path.c:	if ((fd = open(map->path_NO, O_RDONLY) > 0))
textures_path.c:		free(map->path_NO);
textures_path.c:	map->path_SO = ft_substr(map->world_map[i], 2, 
textures_path.c:						ft_strlen(map->world_map[i]) - 2);
textures_path.c:	if ((fd = open(map->path_SO, O_RDONLY) > 0))
textures_path.c:		free(map->path_SO);
textures_path.c:	map->path_WE = ft_substr(map->world_map[i], 2, 
textures_path.c:						ft_strlen(map->world_map[i]) - 2);
textures_path.c:	if ((fd = open(map->path_WE, O_RDONLY) > 0))
textures_path.c:		free(map->path_WE);
textures_path.c:	map->path_EA = ft_substr(map->world_map[i], 2, 
textures_path.c:						ft_strlen(map->world_map[i]) - 2);
textures_path.c:	if ((fd = open(map->path_EA, O_RDONLY) > 0))
textures_path.c:		free(map->path_EA);
validate_map.c:	while (map->world_map[height])
validate_map.c:	if (nsow10(map, i) == 0 || map->sign > 1)
validate_map.c:	if (check_above(map->map_copy, map->window_height) == 0)
validate_map.c:	while (map->world_map[i][j])
validate_map.c:		if (map->world_map[i][j] != '1')
validate_map.c:	while (map->world_map[x] == NULL)
validate_map.c:	map->map_start = x;
validate_map.c:	while (map->world_map[y])
validate_map.c:	map->window_height = y - x;
validate_map.c:	map->window_width = ft_strlen(map->world_map[x]);
validate_map.c:	while (i < map->window_height)
validate_map.c:		length = ft_strlen(map->world_map[i]);
validate_map.c:		if (length > map->window_width)
validate_map.c:				map->window_width = length;
validate_map.c:	while (x < map->window_height)
validate_map.c:		while (map->world_map[x][i])
validate_map.c:			if (map->world_map[x][i] != '1' && map->world_map[x][i] != '0' &&
validate_map.c:				map->world_map[x][i] != 'N' && map->world_map[x][i] != 'E'
validate_map.c:				&& map->world_map[x][i] != 'W' && map->world_map[x][i] != 'S')
validate_map.c:			if (map->world_map[x][i] == 'N' || map->world_map[x][i] == 'S' ||
validate_map.c:				map->world_map[x][i] == 'O' || map->world_map[x][i] == 'W')
validate_map.c:				map->pos_x = x;
validate_map.c:				map->pos_y = i;
validate_map.c:				map->direction = map->world_map[x][i];
validate_map.c:				map->sign++;
verification.c:	map->i = 0;
verification.c:	map->length = 0;
verification.c:	map->map_copy = malloc(sizeof(char *) * map->window_height);
verification.c:	map->i = -1;
verification.c:	while (map->i++ < map->window_height)
verification.c:		map->map_copy[map->i] = malloc(sizeof(char *) * (map->window_width + 1));
verification.c:	map->i = 0;
verification.c:	while (map->i < map->window_height)
verification.c:		map->j = 0;
verification.c:		while (map->j < map->window_width)
verification.c:			if (map->world_map[map->i][map->j] != '\0')
verification.c:				map->map_copy[map->i][map->j] = map->world_map[map->i][map->j];
verification.c:				map->map_copy[map->i][map->j] = 'k';
verification.c:			map->j++;
verification.c:		map->map_copy[map->i][map->j] = '\0';
verification.c:		map->i++;
wall_spaces.c:	while (map->world_map[i])
wall_spaces.c:		z = map->window_width - ft_strlen(map->world_map[i]);
wall_spaces.c:		map_copy[i] = malloc(sizeof(char) * map->window_width);
wall_spaces.c:		while (j < map->window_width)
wall_spaces.c:				map_copy[i] = map->world_map[i][j];
